{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"NBility Model","text":"<p>Welcome to the documentation of the NBility Model.</p> <p></p>"},{"location":"#introduction","title":"Introduction","text":"<p>NBility is a comprehensive capability model designed for grid operators. It was developed to streamline collaboration within the utility sector and with the suppliers and advisors of grid operators. The NBility model comprises three key components:</p> <ul> <li>A capability model</li> <li>A related business object model</li> <li>A value stream model</li> </ul> <p>The NBility model is actively maintained by the Dutch Distribution System Operators. Additionally, a User Group is being established to facilitate the exchange of experiences among users and to gather suggestions for future improvements.</p>"},{"location":"#viewing-the-model","title":"Viewing the Model","text":"<p>You can view the NBility model without needing to install Archi by following this link: View NBility Model.</p> <p></p>"},{"location":"#navigating-the-documentation","title":"Navigating the documentation","text":"<p>Use the navigation menu in the left sidebar to access the pages in the documentation.</p>"},{"location":"#editing-the-model","title":"Editing the Model","text":"<p>If you\u2019d like to contribute to the LF Energy ArchiMate models, you\u2019ll need to use Archi. For more information on how to contribute, please refer to our CONTRIBUTING.md or check out our workshops.</p>"},{"location":"#additional-information","title":"Additional Information","text":"<p>For more details on the NBility model, please explore the following resources:</p> <ul> <li>NBility Model Github </li> <li>Explanation of the NBility model at EDSN</li> <li>Watch the recording of our introductory webinar (held on September, 2024): Webinar NBility September, 2024 (YouTube) (English)</li> </ul>"},{"location":"CODE_OF_CONDUCT/","title":"Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or     advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic     address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a     professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"CODE_OF_CONDUCT/#conflict-resolution","title":"Conflict Resolution","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at OSPO@alliander. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project\u2019s leadership.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p>"},{"location":"CONTRIBUTING/","title":"Contributing to NBility-Model","text":"<p>Thank you for considering contributing to the NBility-Model project! We appreciate your interest and look forward to your contributions. Follow the guidelines below to ensure a smooth and collaborative experience.</p>"},{"location":"CONTRIBUTING/#ways-of-contributing","title":"Ways of Contributing","text":"<p>Contribution does not necessarily mean committing code to the repository. We recognize different levels of contributions, as shown below in increasing order of dedication:</p> <ol> <li>Testing and Feedback<ul> <li>Test and use the model.</li> <li>Provide feedback on the user experience.</li> <li>Suggest new features.</li> </ul> </li> <li>Validation<ul> <li>Validate the model against your use-cases.</li> <li>Share your feedback and experiences.</li> </ul> </li> <li>Bug Reporting<ul> <li>Identify and report bugs.</li> <li>Provide detailed information to help us replicate and fix issues.</li> </ul> </li> <li>Documentation Improvement<ul> <li>Enhance existing documentation.</li> <li>Add new documentation to clarify and improve understanding.</li> </ul> </li> <li>Model Development<ul> <li>Feature Enhancements: Improve or add new features to the NBility codebase.</li> </ul> </li> </ol>"},{"location":"CONTRIBUTING/#getting-started","title":"Getting Started","text":"<p>A good place to start is to look at issues with the good first issue label, or to check the NBility-Model project. These are beginner-friendly issues that are well-suited for new contributors.</p>"},{"location":"CONTRIBUTING/#using-github-issues-for-bug-reports-and-feature-requests","title":"Using GitHub Issues for Bug Reports and Feature Requests","text":"<p>GitHub Issues is a powerful tool for tracking bugs, change requests, and feature requests. Here's how you can use it effectively to contribute to NBility-Model: </p> <ol> <li> <p>Submitting a Bug Report</p> <ul> <li>Navigate to the Issues tab.</li> <li>Click on \"New Issue\" e. *Provide a descriptive title and detailed information about the bug, including steps to reproduce, expected behavior, and screenshots if applicable.</li> </ul> </li> <li> <p>Requesting a Feature</p> <ul> <li>Go to the Issues tab.</li> <li>Click on \"New Issue\".</li> <li>Describe the feature in detail, including the problem it solves and any potential implementation ideas.</li> </ul> </li> <li> <p>Submitting a Change Request</p> <ul> <li>Access the Issues tab.</li> <li>Click \"New Issue\".</li> <li>Provide a clear title and detailed description of the proposed change, including reasons for the change and any potential impacts.</li> </ul> </li> <li> <p>Tracking and Managing Issues</p> <ul> <li>Use labels to categorize and prioritize issues (e.g., bug, enhancement, documentation).</li> <li>Assign issues to yourself or team members to indicate who is responsible for addressing them.</li> <li>Comment on issues to provide updates, ask for more information, or discuss potential solutions.</li> </ul> </li> </ol>"},{"location":"CONTRIBUTING/#example-issue-workflow","title":"Example Issue Workflow","text":"<ol> <li>Open: The issue is created and needs to be addressed.</li> <li>In Progress: The issue is currently being worked on.</li> <li>Review: The issue is resolved and awaiting review.</li> <li>Closed: The issue is resolved and closed after review.</li> </ol> <p>Using GitHub Issues helps maintain a clear and organized workflow, ensuring that all contributions are properly tracked and managed.</p>"},{"location":"CONTRIBUTING/#using-the-nbility-model-project-planning-board","title":"Using the NBility Model Project Planning Board","text":"<p>The NBility-Model project Planning Board is an essential tool for organizing and tracking the progress of tasks within the NBility-Model project. Here's how to use it effectively:</p> <ol> <li> <p>Accessing the Board</p> <ul> <li>Navigate to the project's GitHub Planning Board to view all tasks and their statuses.</li> </ul> </li> <li> <p>Understanding Columns</p> <ul> <li>The board is divided into columns, each representing different stages of the workflow (e.g., Backlog, In Progress, Review, Done).</li> <li>Tasks move from left to right as they progress through these stages.</li> </ul> </li> <li> <p>Creating and Assigning Tasks</p> <ul> <li>New tasks can be created by clicking the \"New Issue\" button. Provide a clear title and detailed description.</li> <li>Assign tasks to yourself or others by using the assignee feature.</li> </ul> </li> <li> <p>Tracking Progress</p> <ul> <li>Update the status of tasks by dragging them to the appropriate column.</li> <li>Use labels to categorize tasks by type (e.g., bug, feature, documentation).</li> </ul> </li> <li> <p>Collaborating and Communicating</p> <ul> <li>Comment on tasks to provide updates or ask for help.</li> <li>Mention team members using @username to notify them of important updates.</li> </ul> </li> </ol>"},{"location":"CONTRIBUTING/#example-workflow","title":"Example Workflow","text":"<ol> <li>Backlog: New ideas and tasks are added here.</li> <li>To Do: Tasks that are ready to be worked on.</li> <li>In Progress: Tasks currently being worked on.</li> <li>Review: Completed tasks awaiting review.</li> <li>Done: Completed and reviewed tasks.</li> </ol> <p>Using the planning board helps keep the project organized, ensures transparency, and facilitates collaboration among contributors.</p>"},{"location":"CONTRIBUTING/#branching-strategy-for-release-management","title":"Branching Strategy for Release Management","text":"<p>To ensure a stable and efficient release process, NBility-Model follows a branching strategy inspired by the Stable Mainline Branching Model for Git. The following diagram illustrates the branching strategy:</p> <p></p> <p>Source diagram: https://www.bitsnbites.eu/a-stable-mainline-branching-model-for-git/</p>"},{"location":"CONTRIBUTING/#key-concepts","title":"Key Concepts","text":"<ol> <li> <p>Main Branch</p> <ul> <li>The main branch is always stable and contains the latest release-ready code.</li> </ul> </li> <li> <p>Feature Branches</p> <ul> <li>Feature branches are created from the master branch for developing new features or making changes. These branches are merged back into the master branch once the feature is complete and has passed review.</li> </ul> </li> <li> <p>Release Branches</p> <ul> <li>Release branches (release/vX.Y) are created from the main branch when preparing for a new release. This allows for final testing and bug fixing without disrupting ongoing development.</li> <li>Release candidates (vX.Y.0-rc1, vX.Y.0-rc2, etc.) are tagged in the release branch as needed.</li> </ul> </li> <li> <p>Hotfixes and Quick Fixes</p> <ul> <li>Critical fixes can be made directly on the release branch and merged back into the main branch. These fixes can also be cherry-picked into other branches if necessary.</li> </ul> </li> </ol>"},{"location":"CONTRIBUTING/#workflow","title":"Workflow","text":"<ol> <li> <p>Development</p> <ul> <li>Create a feature branch from main.</li> <li>Develop and test the feature in the feature branch.</li> <li>Merge the feature branch back into main after review and testing.</li> </ul> </li> <li> <p>Release Preparation</p> <ul> <li>Create a release branch from main.</li> <li>Perform final testing and make any necessary fixes in the release branch.</li> <li>Tag release candidates as needed (vX.Y.0-rc1, vX.Y.0-rc2, etc.).</li> </ul> </li> <li> <p>Release</p> <ul> <li>Merge the release branch back into main once it is stable.</li> <li>Tag the final release (vX.Y.0).</li> </ul> </li> <li> <p>Hotfixes</p> <ul> <li>Apply critical fixes directly to the release branch.</li> <li>Merge these fixes back into main and any active feature branches as needed.</li> </ul> </li> </ol> <p>This branching strategy ensures a stable mainline while allowing for efficient development, testing, and release management.</p>"},{"location":"CONTRIBUTING/#how-to-contribute-to-the-documentation","title":"How to Contribute to the Documentation","text":""},{"location":"CONTRIBUTING/#using-the-markdown-formatted-text","title":"Using the Markdown formatted text","text":"<p>For all documentation, the NBility model uses Markdown. Markdown is a lightweight markup language that allows you to add formatting elements to plaintext documents.</p> <p>For more information on the Markdown format, see Getting Started with Markdown</p>"},{"location":"CONTRIBUTING/#submitting-contributions","title":"Submitting Contributions","text":"<p>Contributions for contributors should be submitted as GitHub pull requests. See Creating a pull request if you're unfamiliar with this concept. When submitting a pull request, please ensure:</p> <p>Once the Pull Request has been reviewed and accepted, the feature branch can be merged with the main repository. By doing so, the changes in the feature branch are committed to the main branch.</p>"},{"location":"CONTRIBUTING/#how-to-contribute-to-the-model","title":"How to Contribute to the Model","text":""},{"location":"CONTRIBUTING/#collaboration-feature-branches","title":"Collaboration - Feature Branches","text":"<p>NBility-Model provides the possibility for users to collaborate on modeling and working on the same repository. Depending on the need, multiple feature branches may be created. See this article on how to create a feature branch. Each user with the appropriate permissions can create a feature branch from the main branch and provide permission to other users who will work on this feature branch.</p> <p>Feature branches exist parallel to the main branches. Users can make changes and commit them to feature branches. They are then visible to all other users. Feature branches provide an effective way for collaboration. Users can work on various aspects of an architecture model and share the progress with each other for review and comments without changing or affecting the main repository.</p>"},{"location":"CONTRIBUTING/#overview-of-collaboration","title":"Overview of Collaboration","text":"<p>After opening Archi, from the menu, choose Collaboration and then click Toggle collaboration. This will open the collaboration workspace showing all repositories where multiple users are collaborating. Clicking on a repository will show all feature branches and the users who created these branches, as shown in Figure 1 below.</p> <p> Fig. 2</p>"},{"location":"CONTRIBUTING/#consistency-in-commits-to-main-branch","title":"Consistency in Commits to Main Branch","text":"<p>It might occur that users, while working on their own branches, make changes that conflict. For such cases, Archi has a conflict resolution mechanism wherein for every conflicting change, the user is asked to specify the change in the model they would like to keep, and which changes can be omitted. By doing so, consistency is ensured in the main architecture repository.</p>"},{"location":"CONTRIBUTING/#follow-the-nbility-model-design-guidelines","title":"Follow the NBility model design guidelines","text":"<p>NBility model adheres to generic design guidelines. Every adjustment and/or expansion should conform to these guidelines. These guidelines consist of:</p> <ul> <li>NBility metamodel</li> <li>Naming conventions</li> <li>Model explenation / design choices</li> <li>Consistency rules</li> </ul> <p>For more information on these guidelines, see GUIDELINES.md</p>"},{"location":"CONTRIBUTING/#submitting-contributions_1","title":"Submitting Contributions","text":"<p>Contributions for contributors should be submitted as GitHub pull requests. See Creating a pull request if you're unfamiliar with this concept. When submitting a pull request, please ensure:</p> <ul> <li>Your code adheres to the project's design guidelines. </li> <li>You have tested your changes thoroughly.</li> <li>You have updated any relevant documentation.</li> </ul> <p>Once the Pull Request has been reviewed and accepted, the feature branch can be merged with the main repository. By doing so, the changes in the feature branch are committed to the main branch.</p>"},{"location":"CONTRIBUTING/#getting-help","title":"Getting Help","text":"<p>If you need help or have any questions, feel free to open an issue on GitHub, and we'll do our best to assist you.</p> <p>We appreciate your contributions and efforts in making NBility-Model better!</p> <p>Happy coding!</p>"},{"location":"GUIDELINES/","title":"NBility model design guidelines","text":"<p>NBility model adheres to generic design rules. Every adjustment and/or expansion should conform to these rules. These guidelines consist of:</p> <ul> <li>NBility metamodel</li> <li>Naming conventions</li> <li>Model explenation / design choices</li> <li>Consistency rules</li> </ul>"},{"location":"GUIDELINES/#nbility-metamodel","title":"NBility metamodel","text":"<p>NBility uses a metamodel:</p> <p></p> <p>The definitions of the elements and relationships in the metamodel are as follows:</p> <ul> <li>elements<ul> <li>business function: collection of business behavior based on a chosen set of criteria such as required business resources and/or competencies, and is managed or performed as a whole</li> <li>business object: concept used within a particular business domain.<ul> <li>A business object is an abstraction of a collection of things in the real world (material or immaterial) important for a grid operator (and therefore to be managed)</li> <li>A business object is countable </li> </ul> </li> <li>value stream: sequence of activities that create an overall result for a customer, stakeholder, or end user</li> </ul> </li> <li>relations<ul> <li>controls: changes and prevents changes to the state of a concept</li> <li>modifies: changes the state of a concept</li> <li>composed of: consists of one or more other concepts</li> <li>contextualizes: influences the definition of a concept</li> <li>serves: provides functionality to another concept</li> <li>triggers: temporal or causal relationship between concepts</li> <li>associated to: unspecified relationship</li> </ul> </li> </ul> <p>The metamodel defines multiplicities using crow\u2019s foot notation, in which a ring represents \u2019zero\u2019, a dash represents \u2019one\u2019 and a crow\u2019s foot represents \u2019many\u2019 or \u2019infinite\u2019. In pairs, they represent the minimum and maximum multiplicities.</p> <ul> <li>For example, the figure shows that each business function is composed of zero to many business functions and that each business object is controlled by one business function.</li> <li>The metamodel has a contextualizes relationship. Contextualization is an abstraction mechanism, like generalization, aggregation, and composition. A context is a relation between things and names. The business object energy grid may be instantiated to actual grids, such as the one in the city of Rotterdam or Amsterdam, but it can also serve as a context for a collection of lower-level business objects, such as grid component and grid design. An example of an object instance that can change context is the transformer. When installed in an energy grid, it ceases to be a material in the context of work and starts to be a grid component in the context of the energy grid. In enterprise data models, the elements at the highest level of abstraction are typically called subject areas, which refers to their role as the context for lower-level elements. In our metamodel, we choose to be agnostic to the level of abstraction and, therefore, do not use subject areas.</li> </ul>"},{"location":"GUIDELINES/#naming-convention","title":"Naming convention","text":"<p>Naming conventions (every element on a certain level of abstraction has a unique name that can be understood by outsiders.</p> <ul> <li>The naming convention for a capabiliy is: &lt; noun + verb &gt;.<ul> <li>Every capability can be preceded by: 'a grid operator can' &lt; noun + verb &gt;.</li> <li>The noun in the name of the capability is mostly the business object managed by that capability.</li> <li>The description of a capability starts with: 'the ability to \u2026</li> </ul> </li> <li>The naming convention of a business object is: &lt; noun &gt;<ul> <li>The name is defined in singular.</li> <li>In defining business objects the concepts and definitions of laws and regulations are leading.</li> <li>Search terms are not synonyms or approved aliases but only a tool for people to find the right business object.</li> </ul> </li> <li>The naming convention for a value stream is: &lt; verb + noun &gt;</li> </ul>"},{"location":"GUIDELINES/#model-explanation-design-choices","title":"Model explanation / design choices","text":"<p>The model is created with some design choices which are explained below. Every adjustment and/or expansion should conform to these choices or explain why these weren't applicable (with a valuecase). </p> <ul> <li>Granularity: The model has three abstraction layers and maximal 7 objects per layer.<ul> <li>Three abstraction layers are defined to support strategic, tactical and operational management of a grid operator.</li> <li>A capability on levels 3, 2 or 1 is only defined if the lifecycle of such a capability differs.<ul> <li>So if the business capability can separately be managed and the activities of the capability can separately be changed.</li> <li>An indication might be if there is a separate business owner within most grid operators, although this is just an indication.</li> </ul> </li> </ul> </li> <li>No registration capabilities - The registration of a business object is always part of the capability managing the business object. No capabilities are defined just for registration of a business object.</li> <li>Two Capability groupings: NBility consists of two Capability groupings: the core capability group (identification starts with 'C'); and the enterprise capability group  (identification starts with 'E')<ul> <li>Core capabilities are capabilities specific for a grid operator</li> <li>Enterprise capabilities are capabilities directing and supporting the business including capabilities developing and maintaining the production factors of a grid operator (such as employees, digital products, office buildings).</li> </ul> </li> <li>Two value stream groupings: Capabilities (core and enterprise) deliver value working together in a value stream context. NBility consists of two value stream groups: externally focused primary value streams realising the grid operator business (identification starts with 'P') and internally focused supporting value streams (identification starts with 'I').</li> <li>Identification: Every capability and value stream has an identification. <ul> <li>Capability identification starts with the grouping identification ('C', 'E') and contains a number within a level and a dot '.' for every level. E.g. C.1; E.1.2.1.</li> <li>Value stream identification starts with the grouping identification ('P', 'I') and contains a letter for every valuestream, e.g. P.A, E.B</li> </ul> </li> <li> <p>Service decoupling: Core value streams do not contain enterprise domain capabilities because these are decoupled via internal services realised by internal value streams.</p> </li> <li> <p>Business capabilities/functions and business objects are part of the enterprise architecture capability (E.1.3.1). The translation to enterprise design (e.g. data, processes, supporting digital products, employees with knowledge and experience, office building) is part of the domains managing these production factors (E.2-E.7).  </p> </li> <li>Process definitions (E.2.1.1 Define and improve processes) are separated from process sessions/cases (E2.1.2 Orchestrate processes).</li> <li>Materials and working equipment is purchased in the enterprise domain (E.5.2) and managed in the core domain (5.4).</li> <li>Main capability \u2018E.1.2 Align stakeholders\u2019 contains (generic) communication to external and internal stakeholders to influence these stakeholders towards the strategic objectives of the grid operator. The operational specific communication is being done in the core capability domains \u2018Service customers\u2019 and \u2018Facilitate the energy market\u2019 and the enterprise domain \u2018Recruit and manage human capital\u2019.</li> <li>Enterprise capability domains \u2018Develop and maintain digital technology\u2019 and \u2018Manage office real estate\u2019 exist apart from \u2018Obtain goods and services\u2019 because of the \u2018lifecycle/maintenance\u2019 component.</li> <li>The capability domain \u2018Develop and maintain digital technology\u2019 is based on the IT4IT model of the open group.</li> <li>The main capability E.2.2 \u2018Manage data\u2019 is aimed at business data. This is data created and maintained by the core and enterprise capabilities that can be combined.  </li> </ul>"},{"location":"GUIDELINES/#consistency-rules","title":"Consistency rules","text":"<p>NBility model adheres to Consistency rules and guidelines.  The metamodel is the basis for formulating consistency rules and guidelines. The metamodel already contains a set of rules in the form of multiplicities that are not zero to many. These rules can be uses as a checklist. The rules (R) are rigid, and the guidelines (G) are recommendations. Rules refer to an element that is composed of or contextualizes other elements as their abstraction. The number of times an element is (recursively) composed or contextualized by another element determines its level of abstraction. </p> <ul> <li>Rules<ul> <li>R1 Each business function is composed in at most one business function</li> <li>R2 Each business object is contextualized by at most one business object</li> <li>R3 Each composition and contextualization relationship is not part of a cycle</li> <li>R4 At each level of abstraction, the business functions are mutually exclusive</li> <li>R5 At each level of abstraction, the business functions are collectively exhaustive</li> <li>R6 At each level of abstraction, the business objects are mutually exclusive</li> <li>R7 At each level of abstraction, the business objects are collectively exhaustive</li> <li>R8 Each business function relates to a business object only if their abstractions are related or when they have no abstractions</li> <li>R9 Each business object is associated to a business object only if it is at the same level of abstraction</li> <li>R10 Each business function controls and/or modifies at least one business object</li> <li>R11 Each business object is controlled by exactly one business function</li> </ul> </li> <li>Guidelines<ul> <li>G1 Each business function controls and/or modifies exactly one business object</li> <li>G2 Each business object is controlled and/or modified by exactly one business Function</li> </ul> </li> </ul> <p>The rationales for these rules and guidelines are as follows.</p> <ul> <li>R1-3 Business architecture models may contain more elements than humans can process easily. Abstraction mechanisms such as composition and contextualization allow the elements to be grouped into bite-sized chunks. These rules ensure the formation of a nested hierarchy, required by rules 4 to 7.</li> <li>R4-7 The MECE principle applies at each level of abstraction. This principle states that items in a group must be mutually exclusive (ME) and collectively exhaustive (CE), meaning that they may not have gaps or overlaps. The collection of business functions at a particular level of abstraction conforms to this principle if each atomic business activity in an organization is associated with exactly one business function. For business objects, this implies that each thing in an organization is associated with exactly one business object. For example, business objects Customer and Corporate Customer are not mutually exclusive, because a particular corporate customer is associated with both business objects. If these are the only business objects used to describe an energy system operator, they also have gaps, because the energy grid is not associated with either.</li> <li>R8 If a business function is related to a business object, then the abstraction of the function is by definition related to the abstraction of the object. This rule implicitly restricts the relationships between business functions and business objects to matching levels of abstraction. This increases consistency, allowing stakeholders to easily switch perspectives.</li> <li>R9 Restricting association relationships within each level of abstraction allows levels to be used independently.</li> <li>R10 A business function that does not control and/or modify a business object cannot create value and must be eliminated.</li> <li>R11 The controls relationship enables a business function to prevent state changes to business objects. This implies access control, that is, any business function that modifies a business object can do so only because the controlling business function allows it. Assigning each business function the exclusive control over a business object creates low coupling. A business object not controlled by a business function is not of interest to the business and is therefore not a business object.</li> <li>G1&amp;2 At each level of abstraction, these guidelines create a similar number of business functions and business objects, and thus, a matching level of granularity. These guidelines are not rules, because managing a business object may require multiple functions. A typical example is where different functions manage the same business object but at different life stages. In such cases, the definition of multiple functions is allowed if managing each life stage requires its own set of resources or competencies. Multiple functions can modify a business object, but only one can control it (rule 11).</li> </ul>"},{"location":"PROJECT_GOVERNANCE/","title":"Project Governance","text":"<p>The basic principle is that decisions are based on consensus. If this decision making process takes too long or a decision is required, the project committee has the authority to make a decision.</p>"},{"location":"PROJECT_GOVERNANCE/#technical-steering-committee","title":"Technical Steering Committee","text":"<p>The Technical Steering Committee (TSC) is responsible for:</p> <ol> <li>General ambitions, objectives and goals of this project</li> <li>Guidelines and procedures and tool selection</li> <li>Architectural and (development) infrastructure choices</li> <li>Raise subjects/issues that are important for the direction/development of this project</li> </ol> <p>The community council consists of the following members:</p> <ol> <li>Lex de Wolff - Alliander</li> <li>Ton van der Knaap - Stedin</li> <li>John Smarius - Enexis</li> <li>Hans Postema - Gasunie</li> </ol> <p>Lex de Wolff will chair the TSC.</p>"},{"location":"PROJECT_GOVERNANCE/#maintainers","title":"Maintainers","text":"<p>Maintainers are responsible for maintaining parts of the code-base. Maintainers have the following responsibilities</p> <ol> <li>Coordinate development activity</li> <li>Make sure code/documentation reviews are being done</li> <li>Coordinate pull-requests</li> <li>Coordinate bug follow-ups</li> <li>Coordinate questions</li> <li>In case of long discussions or arguments, maintainers or other can request a community council decision.</li> </ol> <p>The current maintainers of this project are:</p> <ol> <li>Jonas van den Bogaard - Alliander</li> <li>Prince Singh - Alliander</li> <li>Lex de Wolff - Alliander</li> <li>Ton van der Knaap - Stedin</li> <li>John Smarius - Enexis</li> <li>Hans Postema - Gasunie</li> </ol>"},{"location":"PROJECT_GOVERNANCE/#contributors","title":"Contributors","text":"<p>Contributors include anyone in the technical community that contributes code, documentation, or other technical artefacts to the project.</p> <p>Anyone can become a contributor. There is no expectation of commitment to the project, no specific skill requirements and no selection process. To become a contributor, a community member simply has to perform one or more actions that are beneficial to the project.</p>"},{"location":"SUPPORT/","title":"Getting Help","text":"<p>There are a few ways to connect with the <code>&lt;YOUR_PROJECT_NAME&gt;</code> project:</p> <ul> <li>Submit an issue</li> <li>Send an email to the Technical Steering Committee: YOUR_PROJECT_EMAIL_ADRESS@alliander.com.</li> </ul>"},{"location":"SUPPORT/#how-to-ask-for-help-suggest-a-feature-or-give-recommendations","title":"How to ask for help, suggest a feature, or give recommendations.","text":"<p>If you have trouble installing, building, or using the ,  but there's not yet reason to suspect you've encountered a genuine bug, you can ask a question in the issues tab of the repository. <p>If you have an idea for a new feature or some recommendations for existing features or documentations,  you can also propose it in the issues tab.</p>"},{"location":"SUPPORT/#how-to-report-a-bug","title":"How to report a bug","text":"<p>This project manages bug and enhancement using the GitHub issue tracker.  The various issue templates will guide you on making an effective report.</p>"},{"location":"SUPPORT/#how-to-report-a-security-vulnerability","title":"How to report a security vulnerability","text":"<p>If you think you've found a potential vulnerability in this project, please email YOUR_PROJECT_EMAIL_ADRESS@alliander.com to responsibly disclose it.</p>"},{"location":"SUPPORT/#contributing-a-fix","title":"Contributing a fix","text":"<p>Please refer to CONTRIBUTING.md to make a project contribution.</p>"},{"location":"workshops/","title":"Workshops","text":"<p>In this section, you can find exercises which enable you to contribute to the NBility Model.</p>"},{"location":"workshops/#pre-knowledge","title":"Pre-knowledge","text":"<p>Participants of the workshop are expected to have bacis knowledge of NBility model, Archimate and GitHub flow. </p>"},{"location":"workshops/#preparation","title":"Preparation","text":"<ol> <li>Setting up and configuring Archi and the plug-in</li> <li>Preparing your Github account to configure Archi integration</li> <li>Import the Nbility model into Archi from Github</li> </ol>"},{"location":"workshops/#workshop-archi-beginner","title":"Workshop Archi Beginner","text":"<ol> <li>Navigating the Archi UI</li> <li>Refresh NBility model</li> <li>Add new branch</li> <li>Switch branch</li> <li>Commit and publish_change</li> <li>Create Pull Request Review and Merge Topic Branch</li> <li>Export model to Open Echange XML File</li> <li>Export model to CSV files</li> <li>Generate model in PDF, MS Word or MS Powerpoint</li> </ol>"},{"location":"workshops/#workshop-bizzdesign","title":"Workshop Bizzdesign","text":"<ol> <li>Import archi NBility model in Bizzdesign</li> </ol>"},{"location":"workshops/#license","title":"License","text":"<p>This project is licensed Creative Commons Attribution 4.0 International Public License (CC-BY-4.0) - see LICENSE for details.</p>"},{"location":"workshops/#contributing","title":"Contributing","text":"<p>Please read CODE_OF_CONDUCT.md, CONTRIBUTING.md and PROJECT_GOVERNANACE.md for details on the process for submitting pull requests to us.</p>"},{"location":"workshops/#contact","title":"Contact","text":"<p>Please read SUPPORT.md for how to connect and get into contact with the NBility project.</p>"},{"location":"workshops/import-archi-in-bizzdesign/","title":"Importing an Archi model in Bizzdesign","text":"<p>This is a step by step guide to import a <code>.xml</code> file in Bizzdesign Enterprise Studio. By following this guide you will be able to import architecture elements, element properties and relationships between elements contained in the .xml file. A pre-requisite to this guide, is that you already have generated an .xml file from an architecture modeling tool like Archi (see guide Export model to XML file). </p> <ol> <li>Open Bizzdesign. On the landing page you will see the option to go to the modeler, click on Enterprise Studio Online.</li> </ol> <p></p> <ol> <li>Having clicked on the Enterprise Studio Online, you will find yourself in the online modeling environment. Set on the Expert Mode (right corner). See Image below</li> </ol> <p></p> <ol> <li>On the top you will see an option My Files. Click on it.</li> </ol> <p></p> <ol> <li>A pop up window open. Click Home folder and Upload Files. Navigate to the folder on your local machine where you have saved the .xml file. Select it and Upload. When the upload is successful close this window.</li> </ol> <p></p> <ol> <li>Back in the modelling environment, open an exisiting project or make a new project. To create a new project, click on File (left hand corner). A menu opens up. Choose, New&gt;ArchiMate&gt;Empty model with total view.</li> </ol> <p></p> <ol> <li> <p>After choosing this option, the modeler opens. Below on this left panel you will see five tabs, Create, Model Browser, Properties, Documentation and Viewpoints. Click on Model Browser.</p> </li> <li> <p>Once the model browser opens, you will see Empty model with total view. Click on the drop down menu left to it and select it. See image below.</p> </li> </ol> <p></p> <ol> <li>Once you select the model - in the options tab above select Archimate and then Import &gt; XMI/XML. See image.</li> </ol> <p></p> <ol> <li>From the pop up window, navigate to the Home Folder where you saved the .xml file to be imported in Step 4. Select the file and press OK.</li> </ol> <p></p> <ol> <li>The architecture model containing all views, elements, relationships will now be ready to be edited in the model browser. You may rename the repository if you like.</li> </ol> <p></p>"},{"location":"workshops/archi-beginner/1-navigate-ui/","title":"Navigating the user interface","text":"<ol> <li>In Archi, select [Toggle Collaboration Workspace] and [Toggle Branches View] from the Collaboration menu.  The Workspace and Branch windows will be docked within Archi.  Archi/coArchi supports repository branches.</li> </ol> <p>The Collaboration Workspace is used to navigate between different models and individual branches checked out while the Branches View provide the ability to manipulate branches within the selected model. </p>"},{"location":"workshops/archi-beginner/2-refresh-model/","title":"Refreshing the model","text":"<p>IMPORTANT: To ensure that the local repository remains synchronized with the upstream repository and to prevent overwriting any changes made since the last pull from the server, it is crucial to refresh the model from GitHub before applying any modifications. Regular refreshs of the model not only maintain alignment with the upstream repository but also mitigate the risk of merge conflicts.</p> <ol> <li>To refresh your local copy of the model, open the model / branch from the Collaboration Workspace and select [Refresh Model] from the Collaboration application menu.</li> </ol> <p></p> <p>Alternatively, you can - in archi - select [Toggle Collaboration Workspace] from the Collaboration application menu and refresh Model there.</p> <p></p>"},{"location":"workshops/archi-beginner/3-add-new-branch/","title":"Adding a new branch","text":"<p>To protect the integrity of the main branch and avoid overwriting updates from someone else, it is recommended to create a branch for each new piece of work.  Branches could be named by feature_[topic name] or fix_[topic name].  Branches can be created either through the coArchi plugin or via Github.com.</p>"},{"location":"workshops/archi-beginner/3-add-new-branch/#via-the-coarchi-plugin","title":"Via the coArchi plugin","text":"<ol> <li>In Archi, select [Toggle Branches View] from the Collaboration menu.</li> </ol> <ol> <li>In Branches Workspace, click on the [Add branch] icon.</li> </ol> <ol> <li>Select [Add branch and checkout]. This will create the local topic branch and set it as the active branch. This action won't create the upstream branch (on Github server yet).</li> </ol> <ol> <li>The final step is to publish the new topic branch. This will make the new topic branch available on GitHub.co. To publish your new topic branch, select [Publish changes] from the Collaboration menu.</li> </ol> <ol> <li>To ensure that your new topic branch have been successfully published, you can verify by visiting your topic branch on https://github.com/NBility-Model to see if your new topic branch appears in the specific repository you've worked on.</li> </ol>"},{"location":"workshops/archi-beginner/4-switch-branch/","title":"Switching branches","text":"<ol> <li>In archi, select [Toggle Branches View] from the Collaboration menu.</li> <li>In archi, right click on the branch you like to switch to and click on [Switch branch].</li> </ol>"},{"location":"workshops/archi-beginner/5-commit-and-publish-change/","title":"Committing and publishing changes","text":"<ol> <li>To commit your latest changes, select [Commit changes] from the Collaboration menu. </li> </ol> <ol> <li>Enter your user details and a commit message. By committing changes you create a local snapshot of the repository into a single package. IMPORTANT: This does not upload the changes to the upstream branch, but only create a local packaged copy.</li> </ol> <ol> <li>The final step is to publish the committed package back to the upstream repository. This will insert the last committed package into the upstream branchat GitHub.com. To publish your latest changes, select [Publish changes] from the Collaboration menu.</li> </ol> <ol> <li>To ensure that your changes have been successfully committed and published, you can verify by visiting your topic branch on https://github.com/NBility-Model to see if your commit appears in the specific branch you've worked on.</li> </ol>"},{"location":"workshops/archi-beginner/6-merge-change/","title":"Creating a pull request review and merging topic branch","text":"<p>On regular intervals all committed and published branches need to be merged into the main branch which will trickle down into all subsequent branches.</p> <ol> <li>Log onto your GitHub Account at GitHub.com </li> <li>In https://github.com/NBility-Model, create a Github pull request from your topic branch on by clicking on the button [Compare &amp; Pull Request].</li> </ol> <p></p> <ol> <li>Add a title and description to your pull request. To finalize your pull requestion, click on the button [Create pull request].</li> </ol> <p></p> <ol> <li> <p>Pull requests will be reviewed by one of the maintainers of NBility Model who may discuss, offer constructive feedback, request changes, or approve the work. </p> </li> <li> <p>Upon receiving the sign-off of one of the maintainers of NBility Model you may merge your changes, or if you do not have permission to do that, you may request a maintainer to merge it for you.</p> </li> </ol> <p></p>"},{"location":"workshops/archi-beginner/7-export-xml/","title":"Exporting a model to an Open Exchange XML file","text":"<ol> <li>Open Archi on your local machine and select the architecture repository which you would like to export. For the purpose of this example, we choose Nbility-business-capabilities-EN. See image below.</li> </ol> <ol> <li>Then select, File &gt; Export &gt; Model to Open Exchange File.</li> </ol> <ol> <li>A pop up window open where in you can select the folder location to save the .xml file. See image below.</li> </ol> <ol> <li>The .xml file will be saved in the chosen folder, along with three .xsd files. </li> </ol>"},{"location":"workshops/archi-beginner/8-export-csv/","title":"Exporting a model to an Open Exchange CSV file","text":"<ol> <li>Open Archi on your local machine and select the architecture repository which you would like to export. For the purpose of this example, we choose Nbility-business-capabilities-EN. See image below.</li> </ol> <ol> <li>Then select, File &gt; Export &gt; Model to CSV.</li> </ol> <ol> <li>A pop up window open where in you can select the folder location to save the .csv file. You can also select relevant option for example, delimiting character an MS Excel compatibility. See image below.</li> </ol> <ol> <li>Three .csv file will be saved in the chosen folder. one each for elements, properties en relations.</li> </ol>"},{"location":"workshops/archi-beginner/9-generate-pdf-docx-pptx/","title":"Generating a model in PDF, MS Word or MS Powerpoint","text":"<ol> <li>In archi, select [Report] and then [Jasper] in the File menu.</li> </ol> <ol> <li>Select [MS Powerpoint, PDF and MS Word] in Formats to generate and click on the button Finish. </li> </ol> <ol> <li>The generated files are available at the specified location.</li> </ol>"},{"location":"workshops/preparation/1-setup-archi/","title":"Setting up and configuring Archi and the plug-in","text":""},{"location":"workshops/preparation/1-setup-archi/#installing-archi","title":"Installing Archi","text":"<ol> <li>Download and install the latest version of Archi from https://www.archimatetool.com/download/</li> </ol>"},{"location":"workshops/preparation/1-setup-archi/#download-and-install-the-coarchi-plug-in","title":"Download and install the coArchi plug-in","text":"<ol> <li> <p>Download the most recent version of coArchi plug-in zip file from the Archi plugins page.</p> </li> <li> <p>In Archi, select \"Manage Plug-ins...\" from the main Help menu. From the Plug-ins Manager window, select \"Install New...\" and select the coArchi plug-in zip file. You may need to restart Archi to activate the plug-in. Please ensure the plug-in version supports the installed version of Archi.</p> </li> </ol> <p></p> <p></p> <ol> <li>If your plug-in installation was successful, the [Collaboration] menu item should be visible appear on the application menu in Archi after restarting Archi.</li> </ol> <p></p>"},{"location":"workshops/preparation/2-prepare-github/","title":"Preparing your GitHub account to configure Archi integration","text":"<ol> <li>Log onto your GitHub Account at GitHub.com or create a GitHub account at GitHub.com</li> <li>Please share your GitHub account name by emailing it to OSPO@alliander.com, so that we can add you to the NBility-Model GitHub organization.</li> <li>Accept the invitation to join the NBility-Model GitHub organization. Note that this process may take some time as it requires manual intervention by the NBility-Model maintainers. In the meantime, you can proceed with step 4.</li> <li>To configure Archi for Github integration you would need to create a Personal Access Token (PAT) from your user account.  For a detailed overview of the process you can visit https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-toke</li> </ol> <p>Alternatively, you can follow the steps below:</p>"},{"location":"workshops/preparation/2-prepare-github/#create-a-github-personal-access-token-pat","title":"Create a Github Personal Access Token (PAT)","text":"<ol> <li>Select [Settings] from your account menu (look for the avatar at the right-top of the page)</li> </ol> <ol> <li>Select [Developer settings] from the menu on the left-hand of the page</li> </ol> <ol> <li>Select [Personal access tokens] and then [Tokens (classic)]</li> <li>Select [Generate new token] and then [Generate new token (classic)]</li> <li>Enter your token name, set the token expiry and select the [repo] scope for the token</li> </ol> <ol> <li>Click [Generate token]</li> <li>Copy the token from the screen and store it securely for configuration purposes.  IMPORTANT: YOU CANNOT RETRIEVE THE TOKEN AFTER IT HAS BEEN GENERATED AND DISPLAYED ON THIS PAGE.  IF YOU LOOSE IT YOU WILL NEED TO GENERATE A NEW TOKEN.</li> </ol>"},{"location":"workshops/preparation/3-import-model-to-archi/","title":"Import the model from GitHub into Archi","text":"<p>Once you have configured Archi and coArchi, and generated your Github Personal Access Token (PAT) you will be able to import the Nbility model into archi.</p> <ol> <li>In Archi, select [Import Remote Model to Workspace] from Collaboration menu.  You may need to provide Archi a master password to unlock this feature. IMPORTANT: YOU CANNOT RETRIEVE THE MASTER PASSWORD AFTERWARDS. IF YOU LOOSE IT YOU MAY WILL NEED TO REINSTALL ARCHI.</li> </ol> <p></p> <ol> <li>In the Add Remote Model modal, provide the following information:</li> </ol> Field Description URL The full web URL of the repo: https://github.com/username/reponame.git User Name Your Github user name Password The Github Personal Access Token (PAT) you generated earlier <p>It is possible that you could use your GitHub credentials as-is in the screen.  However, it is recommended that you enable 2FA on your Github account to protect access to the repo.  In this case you will only be able to log onto Github from Archi using the Github Personal Access Token (PAT).</p> <p>To obtain the repo URL, you can copy of from the Clone address:</p> <p></p>"}]}